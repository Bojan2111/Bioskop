// <auto-generated />
using System;
using Bioskop.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bioskop.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230620104922_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Bioskop.Models.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Distributer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Glumci")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GodinaProizvodnje")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Obrisan")
                        .HasColumnType("bit");

                    b.Property<string>("Opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Reziser")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Trajanje")
                        .HasColumnType("int");

                    b.Property<string>("Zanrovi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZemljaPorekla")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Filmovi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Distributer = "Distr 1",
                            Glumci = "Glumci 1",
                            GodinaProizvodnje = 1985,
                            Naziv = "Film 1",
                            Obrisan = false,
                            Opis = "Opis 1",
                            Reziser = "Reziser 1",
                            Trajanje = 120,
                            Zanrovi = "Zanrovi 1",
                            ZemljaPorekla = "Zemlja 1"
                        },
                        new
                        {
                            Id = 2,
                            Distributer = "Distr 2",
                            Glumci = "Glumci 2",
                            GodinaProizvodnje = 1984,
                            Naziv = "Film 2",
                            Obrisan = false,
                            Opis = "Opis 2",
                            Reziser = "Reziser 2",
                            Trajanje = 110,
                            Zanrovi = "Zanrovi 2",
                            ZemljaPorekla = "Zemlja 2"
                        },
                        new
                        {
                            Id = 3,
                            Distributer = "Metro Goldwyn Mayer",
                            Glumci = "Mel Brooks, John Candy, Rick Moranis, Bill Pullman, Daphne Zuniga",
                            GodinaProizvodnje = 1987,
                            Naziv = "Spaceballs",
                            Obrisan = false,
                            Opis = "Opis",
                            Reziser = "Mel Brooks",
                            Trajanje = 96,
                            Zanrovi = "Sci-Fi, Komedija, Avantura",
                            ZemljaPorekla = "USA"
                        },
                        new
                        {
                            Id = 4,
                            Distributer = "Distr 4",
                            Glumci = "Glumci 4",
                            GodinaProizvodnje = 1991,
                            Naziv = "Film 4",
                            Obrisan = false,
                            Opis = "Opis 4",
                            Reziser = "Reziser 4",
                            Trajanje = 90,
                            Zanrovi = "Zanrovi 4",
                            ZemljaPorekla = "Zemlja 4"
                        },
                        new
                        {
                            Id = 5,
                            Distributer = "Distr 5",
                            Glumci = "Glumci 5",
                            GodinaProizvodnje = 2001,
                            Naziv = "Film 5",
                            Obrisan = false,
                            Opis = "Opis 5",
                            Reziser = "Reziser 5",
                            Trajanje = 98,
                            Zanrovi = "Zanrovi 5",
                            ZemljaPorekla = "Zemlja 5"
                        });
                });

            modelBuilder.Entity("Bioskop.Models.Karta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KorisnikId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProjekcijaId")
                        .HasColumnType("int");

                    b.Property<int>("SedisteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VremeProdaje")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("ProjekcijaId");

                    b.HasIndex("SedisteId");

                    b.ToTable("Karte");
                });

            modelBuilder.Entity("Bioskop.Models.Login.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Deleted")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "89a481d0-09f7-42b6-b36e-a8b5e26b001a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "171600dd-58d8-4a3b-b9ce-467fd3c230bd",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Email = "admin@example.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEPeI6S1JXraOCI667RNTCB/nrMCQLJGiiC/co3esM092nD7r4Ahg3wQ5eYAvEjKEJw==",
                            PhoneNumberConfirmed = false,
                            RegistrationDate = new DateTime(2023, 3, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "2592766c-3e3d-4fd2-91b9-29cfd8d634ca",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "74e4adb7-d426-4beb-9e57-5149f9834fc1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4a3e82dd-05ae-4ba1-ae2f-cae46dd6b83d",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Email = "korisnik1@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEEFxa01Gf2zBqmPAe/X1l/6R79ckTEIx75nX/oLBnjG+B8oBh3DYCmnihmgPHGWstA==",
                            PhoneNumberConfirmed = false,
                            RegistrationDate = new DateTime(2023, 4, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "a8e8c8fe-e135-4429-97ee-96a2822bea67",
                            TwoFactorEnabled = false,
                            UserName = "korisnik1"
                        },
                        new
                        {
                            Id = "0c3a13e4-2cd9-4962-addd-9a2e00d1e8dc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "ca505d91-760a-4222-b6b8-3898c8e992ab",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Deleted = false,
                            Email = "korisnik2@test.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEAae4p2BqMVPx+V5I5c9AsrIvpi+oueeb5TidXMCRLb8xa0Z63qh5zw4ECsNsq6XMg==",
                            PhoneNumberConfirmed = false,
                            RegistrationDate = new DateTime(2023, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SecurityStamp = "80ed72cb-82a8-437b-9d1e-22695c482df8",
                            TwoFactorEnabled = false,
                            UserName = "korisnik2"
                        });
                });

            modelBuilder.Entity("Bioskop.Models.Projekcija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdminId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdministratorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CenaKarte")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<bool>("Obrisana")
                        .HasColumnType("bit");

                    b.Property<int>("SalaId")
                        .HasColumnType("int");

                    b.Property<int>("TipProjekcijeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VremePrikazivanja")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("FilmId");

                    b.HasIndex("SalaId");

                    b.HasIndex("TipProjekcijeId");

                    b.ToTable("Projekcije");
                });

            modelBuilder.Entity("Bioskop.Models.Sala", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sale");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Mala sala"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Velika sala"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Ultimate sala"
                        });
                });

            modelBuilder.Entity("Bioskop.Models.Sediste", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Broj")
                        .HasColumnType("int");

                    b.Property<int>("SalaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalaId");

                    b.ToTable("Sedista");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Broj = 1,
                            SalaId = 1
                        },
                        new
                        {
                            Id = 2,
                            Broj = 2,
                            SalaId = 1
                        },
                        new
                        {
                            Id = 3,
                            Broj = 3,
                            SalaId = 1
                        },
                        new
                        {
                            Id = 4,
                            Broj = 4,
                            SalaId = 1
                        },
                        new
                        {
                            Id = 5,
                            Broj = 5,
                            SalaId = 1
                        },
                        new
                        {
                            Id = 6,
                            Broj = 6,
                            SalaId = 1
                        },
                        new
                        {
                            Id = 7,
                            Broj = 7,
                            SalaId = 1
                        },
                        new
                        {
                            Id = 8,
                            Broj = 8,
                            SalaId = 1
                        },
                        new
                        {
                            Id = 9,
                            Broj = 9,
                            SalaId = 1
                        },
                        new
                        {
                            Id = 10,
                            Broj = 10,
                            SalaId = 1
                        },
                        new
                        {
                            Id = 11,
                            Broj = 1,
                            SalaId = 2
                        },
                        new
                        {
                            Id = 12,
                            Broj = 2,
                            SalaId = 2
                        },
                        new
                        {
                            Id = 13,
                            Broj = 3,
                            SalaId = 2
                        },
                        new
                        {
                            Id = 14,
                            Broj = 4,
                            SalaId = 2
                        },
                        new
                        {
                            Id = 15,
                            Broj = 5,
                            SalaId = 2
                        },
                        new
                        {
                            Id = 16,
                            Broj = 6,
                            SalaId = 2
                        },
                        new
                        {
                            Id = 17,
                            Broj = 7,
                            SalaId = 2
                        },
                        new
                        {
                            Id = 18,
                            Broj = 8,
                            SalaId = 2
                        },
                        new
                        {
                            Id = 19,
                            Broj = 9,
                            SalaId = 2
                        },
                        new
                        {
                            Id = 20,
                            Broj = 10,
                            SalaId = 2
                        },
                        new
                        {
                            Id = 21,
                            Broj = 11,
                            SalaId = 2
                        },
                        new
                        {
                            Id = 22,
                            Broj = 12,
                            SalaId = 2
                        },
                        new
                        {
                            Id = 23,
                            Broj = 13,
                            SalaId = 2
                        },
                        new
                        {
                            Id = 24,
                            Broj = 14,
                            SalaId = 2
                        },
                        new
                        {
                            Id = 25,
                            Broj = 15,
                            SalaId = 2
                        },
                        new
                        {
                            Id = 26,
                            Broj = 1,
                            SalaId = 3
                        },
                        new
                        {
                            Id = 27,
                            Broj = 2,
                            SalaId = 3
                        },
                        new
                        {
                            Id = 28,
                            Broj = 3,
                            SalaId = 3
                        },
                        new
                        {
                            Id = 29,
                            Broj = 4,
                            SalaId = 3
                        },
                        new
                        {
                            Id = 30,
                            Broj = 5,
                            SalaId = 3
                        },
                        new
                        {
                            Id = 31,
                            Broj = 6,
                            SalaId = 3
                        },
                        new
                        {
                            Id = 32,
                            Broj = 7,
                            SalaId = 3
                        },
                        new
                        {
                            Id = 33,
                            Broj = 8,
                            SalaId = 3
                        },
                        new
                        {
                            Id = 34,
                            Broj = 9,
                            SalaId = 3
                        },
                        new
                        {
                            Id = 35,
                            Broj = 10,
                            SalaId = 3
                        },
                        new
                        {
                            Id = 36,
                            Broj = 11,
                            SalaId = 3
                        },
                        new
                        {
                            Id = 37,
                            Broj = 12,
                            SalaId = 3
                        },
                        new
                        {
                            Id = 38,
                            Broj = 13,
                            SalaId = 3
                        },
                        new
                        {
                            Id = 39,
                            Broj = 14,
                            SalaId = 3
                        },
                        new
                        {
                            Id = 40,
                            Broj = 15,
                            SalaId = 3
                        },
                        new
                        {
                            Id = 41,
                            Broj = 16,
                            SalaId = 3
                        },
                        new
                        {
                            Id = 42,
                            Broj = 17,
                            SalaId = 3
                        },
                        new
                        {
                            Id = 43,
                            Broj = 18,
                            SalaId = 3
                        },
                        new
                        {
                            Id = 44,
                            Broj = 19,
                            SalaId = 3
                        },
                        new
                        {
                            Id = 45,
                            Broj = 20,
                            SalaId = 3
                        });
                });

            modelBuilder.Entity("Bioskop.Models.TipProjekcije", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Naziv")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TipoviProjekcije");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "2D"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "3D"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "4D"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Bioskop.Models.Karta", b =>
                {
                    b.HasOne("Bioskop.Models.Login.ApplicationUser", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bioskop.Models.Projekcija", "Projekcija")
                        .WithMany()
                        .HasForeignKey("ProjekcijaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bioskop.Models.Sediste", "Sediste")
                        .WithMany()
                        .HasForeignKey("SedisteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Projekcija");

                    b.Navigation("Sediste");
                });

            modelBuilder.Entity("Bioskop.Models.Projekcija", b =>
                {
                    b.HasOne("Bioskop.Models.Login.ApplicationUser", "Admin")
                        .WithMany()
                        .HasForeignKey("AdminId");

                    b.HasOne("Bioskop.Models.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bioskop.Models.Sala", "Sala")
                        .WithMany()
                        .HasForeignKey("SalaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bioskop.Models.TipProjekcije", "TipProjekcije")
                        .WithMany()
                        .HasForeignKey("TipProjekcijeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Film");

                    b.Navigation("Sala");

                    b.Navigation("TipProjekcije");
                });

            modelBuilder.Entity("Bioskop.Models.Sediste", b =>
                {
                    b.HasOne("Bioskop.Models.Sala", "Sala")
                        .WithMany()
                        .HasForeignKey("SalaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sala");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Bioskop.Models.Login.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Bioskop.Models.Login.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bioskop.Models.Login.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Bioskop.Models.Login.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
